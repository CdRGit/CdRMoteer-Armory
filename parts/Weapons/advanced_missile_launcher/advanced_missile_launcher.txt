Part : /BASE_PART
{
	NameKey = "Parts/MissileLauncher"
	IconNameKey = "Parts/MissileLauncherIcon"
	ID = cdrmoteer.armory.advanced_missile_launcher // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "WeaponsMissile"
	DescriptionKey = "Parts/MissileLauncherDesc"
	Cost = 15000
	AIValue = &Cost
	Size = [3,6]
	PhysicalRect = [0, 2, 3, 4]
	RectColliderRectType = Normal
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 6000
	TypeCategories = [weapon, uses_missiles, uses_emps, uses_nukes, uses_mines, uses_launcher_parts, is_crewed]
	ProhibitAbove = 2
	AllowedDoorLocations
	[
		[-1, 2]
		[2, 2]
	]
	ExternalWallsByCell
	[
		{
			Key = [1, 2]
			Value = [BottomLeft, Bottom, BottomRight]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight]
		}
		{
			Key = [2, 0]
			Value = [Right, TopRight, Top, TopLeft]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [46, 92]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		MissileType
		{
			Type = UIToggle
			ToggleID = "missile_type"
			Default = 0
			AlwaysAllowInBuildMode = true
		}

		HEMissilesToggle
		{
			Type = ModeToggle
			Mode = MissileType
			OnMode = 0
		}
		HEMissilesComponents
		{
			Type = ToggledComponents
			Toggle = HEMissilesToggle
			Components = &<he/missile_launcher_he.txt>/Components
			IncludeInBlueprintsInToggleMode
			{
				ToggleID = missile_type
				Mode = 0
			}
		}

		CommonReloadTimerShort
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerMed
		{
			Type = Timer
			Duration = 6
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerLong
		{
			Type = Timer
			Duration = 10
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}

		MissilesPrereqProxy
		{
			Type = ToggleProxy
			ComponentID = MissilesPrereq
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.65, 3.4]
			Rotation = 20d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.35, 3.4]
			Rotation = -20d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [MissilesPrereqProxy, PowerToggle]
			CrewDestinations
			[
				[.65, 3.4]
				[1.35, 3.4]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 3]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3,6]
					}
					{
						File = "floor_33.png"
						Size = [3,6]
					}
					{
						File = "floor_66.png"
						Size = [3,6]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 2]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.075
						AnimationStartTime = Zero
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 2]
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [3, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 4]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3,6]
					}
					{
						File = "walls_33.png"
						Size = [3,6]
					}
					{
						File = "walls_66.png"
						Size = [3,6]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [3,6]
					}
					{
						File = "roof_33.png"
						Size = [3,6]
					}
					{
						File = "roof_66.png"
						Size = [3,6]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [3, 2]
					}
					{
						File = "roof_windows_on_33.png"
						Size = [3, 2]
					}
					{
						File = "roof_windows_on_66.png"
						Size = [3, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [3, 2]
					}
					{
						File = "roof_windows_off_33.png"
						Size = [3, 2]
					}
					{
						File = "roof_windows_off_66.png"
						Size = [3, 2]
					}
				]
			}
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 3]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		BlueprintsHE
		{
			Type = BlueprintSprite
			File = "blueprints_he.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = missile_type
				Mode = 0
			}
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		HEMissileCapacity = 3
		EMPMissileCapacity = 1
		NukeMissileCapacity = 1
		MineCapacity = 6

		MinCrew = (&CrewRequired) + (&<he/missile_launcher_he.txt>/MissileStats/Stats/ROF) * (&<he/missile_launcher_he.txt>/MissileStats/Stats/MissileParts) * 1
		RecCrew = (&CrewRequired) + (&<he/missile_launcher_he.txt>/MissileStats/Stats/ROF) * (&<he/missile_launcher_he.txt>/MissileStats/Stats/MissileParts) * 4
	}
}
