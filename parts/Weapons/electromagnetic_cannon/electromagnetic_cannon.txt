Part : /BASE_PART
{
	NameKey = "CdRMoteer/Armory/Parts/ElectroMagneticCannon"
	IconNameKey = "CdRMoteer/Armory/Parts/ElectroMagneticCannonIcon"
	DescriptionKey = "CdRMoteer/Armory/Parts/ElectroMagneticCannonDesc"
	ID = cdrmoteer.armory.electromagnetic_cannon
	EditorGroups = ["WeaponsEnergy","CdRMoteerArmory"]
	Cost = 4000
	AIValue = &Cost
	TypeCategories = [weapon, uses_power, is_crewed]
	Size = [1, 4]
	PhysicalRect = [0, 1, 1, 3]
	SaveRect = &PhysicalRect
	SelectionPriotity = 1
	SelectionTypeByRotation = true
	MaxHealth = 5000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 2
	AllowedDoorLocations
	[
		[-1, 2]
		[1, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [13, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		BatteryStorage
		{
			Type = AmmoConsumer
			AmmoType = battery
			MaxAmmo = 8000
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			JobUnassignThreshold = 1000000// Effectively unassignable.
			ResupplyThreshold = 1000
			AmmoDesireToggle = PowerToggle

			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 2.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 5]
						Offset = [0, -1]
					}
					{
						File = "floor_33.png"
						Size = [1, 5]
						Offset = [0, -1]
					}
					{
						File = "floor_66.png"
						Size = [1, 5]
						Offset = [0, -1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
						]
						Size = [1, 5]
						Offset = [0, -1]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 5]
						Offset = [0, -1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 3]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 3]
					}
					{
						File = "walls_33.png"
						Size = [1, 4]
						Offset = [0, -.5]
					}
					{
						File = "walls_66.png"
						Size = [1, 4]
						Offset = [0, -.5]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 3]
					}
					{
						File = "roof_33.png"
						Size = [1, 3]
					}
					{
						File = "roof_66.png"
						Size = [1, 3]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"roof_doodads_on1.png"
							"roof_doodads_on2.png"
							"roof_doodads_on3.png"
							"roof_doodads_on4.png"
							"roof_doodads_on5.png"
							"roof_doodads_on6.png"
							"roof_doodads_on7.png"
							"roof_doodads_on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						File = "roof_doodads_off.png"
						Size = [1, 2]
						AnimationInterval = 0.1
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, .5]
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_on_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_on_66.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, .5]
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_off_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_windows_off_66.png"
						Size = [1, 2]
					}
				]
			}
		}

		Weapon
		{
			Type = FixedWeapon
			Location = [.5, .84375] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0.5
			SpawnLoc = [0, 0]
			AIFirepowerRating = 3000
			Emitter = BeamEmitter

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = FireModeToggle
			}

			CoverageLine
			{
				Sprite
				{
					Texture = &/INDICATORS/RadialGradient
					VertexColor = [255, 255, 255, 127]
				}
				Thickness = 2
				CapBeginPixels = 12
				CapEndPixels = 12
			}
		}

		BeamEmitter : <beam/beam.txt>
		{
			Type = BeamEmitter
			ChainedTo = Weapon
			FireTrigger = Weapon
			GetTargetFrom = Weapon
			OperationalToggle = IsOperational
			AmmoStorage = BatteryStorage
			AmmoUsed = 500
			MinAmmoUsed = 1
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Weapon
		}

		ChargeEffect
		{
			Type = TriggeredEffects
			ChainedTo = Weapon
			Trigger = Weapon
			Location = [0, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "charge.wav"
					Volume = .25
					Speed = 1.5
				}
			]
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = Weapon
			Trigger = BeamEmitter
			Location = [0, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&<particles/electro_bolter_shoot.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "shoot.wav"
					Volume = 1
					SpeedVariation = .05
				}
			]
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 3.4]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [BatteryStorage, PowerToggle]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		AmmoSprites
		{
			Type = AmmoSprites
			Location = [.5, 1.5]
			AmmoStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 5]
				}
				{
					File = "batteries2.png"
					Size = [1, 5]
				}
				{
					File = "batteries3.png"
					Size = [1, 5]
				}
				{
					File = "batteries4.png"
					Size = [1, 5]
				}
				{
					File = "batteries5.png"
					Size = [1, 5]
				}
				{
					File = "batteries6.png"
					Size = [1, 5]
				}
				{
					File = "batteries7.png"
					Size = [1, 5]
				}
				{
					File = "batteries8.png"
					Size = [1, 5]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, 2]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 2]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 5]
			Offset = [0, -.5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		MinPower = (&../StatsByCategory/0/Stats/PowerPerSecond) / 2
		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		MinCrew = (&CrewRequired) + (&MinPower) * 2
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "CdRMoteer/Armory/StatCategories/ElectroMagneticCannon"
			Stats
			{
				DamagePerShot = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/1/Damage
				DamagePerSecond = (&DamagePerShot) * (&ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ShieldDamagePerShot = (&DamagePerShot)
				ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&ROF)
				ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
				PowerDrainPerShot = (&~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/TotalDrain) / 1000
				PowerDrainPerSecond = (&PowerDrainPerShot) * (&ROF)
				PowerDrain = [&../PowerDrainPerShot, &../PowerDrainPerSecond]
				PowerDrainArea = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Radius
				ROF = 1 / (&~/Part/Components/Weapon/FireInterval)
				Range = &~/Part/Components/BeamEmitter/Range
				ShotSpeed = Infinity
				PowerPerShot = (&~/Part/Components/BeamEmitter/AmmoUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}